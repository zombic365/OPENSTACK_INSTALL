function run_cmd() {
    _CMD=$@
    log_msg "CMD" "$@"
    eval "${_CMD}" >/dev/null 2>&1

    if [ $? -eq 0 ]; then
        log_msg "OK" "Command ok."
        return 0
    else
        log_msg "FAIL" "Command fail."
        return 1
    fi
}

function check_db() {
    _DB_NAME=$1

    if [ -n ${DB_PASS} ]; then
        if mysqlshow -uroot -p''${DB_PASS}'' |grep -wq ${_DB_NAME} >/dev/null 2>&1; then
            log_msg "SKIP" "Already DB ${_DB_NAME}."
            return 1
        else
            return 0
        fi
    else
        log_msg "ERROR" "No value DB_PASS, check config file."
        exit 1
    fi
}

function check_svc() {
    _SVC_NAME=($@)
    _SVC_NAME_NUM=${#_SVC_NAME[@]}

    for _SVC in ${_SVC_NAME[@]}; do
        if [[ ${_SVC_CHECK} -eq 0 ]] && [[ ${_SVC_NAME_NUM} -eq 0 ]]; then
            return 0
        else
            _SVC_NAME_NUM=$(expr ${_SVC_NAME_NUM} - 1)
        fi

        if ! systemctl list-unit-files --state enabled |grep -wq ${_SVC}; then
            run_cmd "systemctl enable --now ${_SVC}"
        fi
        
        if ! systemctl is-active ${_SVC} |grep -wq active; then
            run_cmd "systemctl restart ${_SVC}"
            if [ $? -eq 0 ]; then
                _SVC_CHECK=0
            else
                log_msg "WARR" "Service start fail."
                return 1
            fi
        else
            _SVC_CHECK=0
        fi
    done
}

function check_pkg() {
    _PKG_NAME=($@)
    _PKG_NAME_NUM=${#_PKG_NAME[@]}

    for _PKG in ${_PKG_NAME[@]}; do
        _PKG_NAME_NUM=$(expr ${_PKG_NAME_NUM} - 1)
        case ${PKG_CMD[1]} in
            rpm )
                if ! ${PKG_CMD[1]} -q ${_PKG} >/dev/null 2>&1; then            
                    _install=0
                else
                    _install=1
                fi
            ;;
            dpkg )
                if ! ${PKG_CMD[1]} -s ${_PKG} >/dev/null 2>&1; then
                    _install=0
                else
                    _install=1
                fi
            ;;
        esac

        if [ ${_install} -eq 0 ]; then
            run_cmd "${PKG_CMD[0]} install -y ${_PKG}"
            if [ $? -eq 0 ]; then
                if [ ${_PKG_NAME_NUM} -eq 0 ]; then 
                    return 0
                else
                    continue
                fi
            else
                log_msg "ERROR" "Package install fail ${_PKG}."
                exit 1
            fi
        elif [ ${_install} -eq 1 ]; then
            log_msg "SKIP" "Already install ${_PKG}."
            if [ ${_PKG_NAME_NUM} -eq 0 ]; then 
                return 0
            else
                continue
            fi
        else
            log_msg "ERROR" "Aboart bug"
            exit 1
        fi
    done
}

function ops_init() {
    _CHECK_ARGS=($@)
    if [ ${#_CHECK_ARGS[@]} -ne 4 ]; then
        log_msg "ERROR" "Check Commpoent args [ USER, PASS, NAME, PORT ]."
        exit 1
    else
        _COMPONENT_USER=$1
        _COMPONENT_PASS=$2
        _COMPONENT_TYPE=$3
        _COMPONENT_PORT=$4
    fi

    if ! openstack user show ${_COMPONENT_USER} -f json |jq .enabled |grep -wq 'true' >/dev/null 2>&1; then
        run_cmd "openstack user create --domain default --password \"${_COMPONENT_PASS}\" ${_COMPONENT_USER}"
        if [ $? -eq 1 ]; then
            exit 1
        else
            sleep 1
        fi
    else
        log_msg "SKIP" "Already user ${_COMPONENT_USER}"
    fi

    
    if ! openstack role assignment list --user ${_COMPONENT_USER} --role admin -f json |jq .[0].Inherited |grep -wq 'false' >/dev/null 2>&1; then
        run_cmd "openstack role add --project service --user ${_COMPONENT_USER} admin"
        if [ $? -eq 1 ]; then
            exit 1
        fi
    else
        log_msg "SKIP" "Already role add ${_COMPONENT_USER}"
    fi

    if ! openstack service show ${_COMPONENT_USER} -f json |jq .enabled |grep -wq 'true' >/dev/null 2>&1; then
        run_cmd "openstack service create --name ${_COMPONENT_USER} --description \"OpenStack ${_COMPONENT_TYPE}\" ${_COMPONENT_TYPE}"
        if [ $? -eq 1 ]; then
            exit 1
        fi
    else
        log_msg "SKIP" "Already create service ${_COMPONENT_USER}"
    fi
 
    for _INTERFACE in admin internal public; do
        if ! openstack endpoint list --service ${_COMPONENT_TYPE} --interface ${_INTERFACE} -f json |jq  '.[0].Enabled' |grep -wq 'true' >/dev/null 2>&1; then
            run_cmd "openstack endpoint create --region RegionOne ${_COMPONENT_TYPE} ${_INTERFACE} http://controller:${_COMPONENT_PORT}"
            if  [ $? -eq 1 ]; then
                exit 1
            fi
        else
            log_msg "SKIP" "Already endpoint ${_INTERFACE} ${_COMPONENT_TYPE}"
        fi
    done

    return 0
}